@{
    Layout = null; // Veya gerçek layout dosyanız gibi "_Layout"
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kitap Dünyası - Sepetim</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
    <link rel="stylesheet" href="~/css/WebSite.css" />
    <style>
        /* CSS'iniz olduğu gibi kalabilir */
        .cart-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }

        .cart-item-image {
            width: 80px;
            height: 100px;
            flex-shrink: 0;
            overflow: hidden;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

            .cart-item-image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                display: block;
            }
    </style>
    @* AntiForgeryToken'ı buraya ekledik. AJAX POST istekleri için gerekli *@
    @Html.AntiForgeryToken()
</head>
<body>
    @await Component.InvokeAsync("_DefaultHeaderPartials")
    <main>
        <section class="cart-section container">
            <h2>Sepetim</h2>
            <div id="cart-items-container" class="cart-items"></div>
            <div id="cart-summary" class="cart-summary">
                <div>
                    <span>Kitapların Toplam Fiyatı:</span>
                    <span id="books-subtotal-price">₺0.00</span>
                </div>
                <div>
                    <span>KDV (%18):</span>
                    <span id="vat-amount">₺0.00</span>
                </div>
                <div>
                    <span>Kargo Ücreti:</span>
                    <span id="shipping-fee">₺0.00</span>
                </div>
                <div class="total-price-final">
                    <span>Genel Toplam:</span>
                    <span id="final-total-price">₺0.00</span>
                </div>
            </div>
            <a href="/Order/Index/" id="checkout-button" class="checkout-btn" style="display: none;">Siparişi Tamamla</a>
            <p id="empty-cart-message" class="empty-cart-message">Sepetinizde henüz ürün bulunmamaktadır. Hadi kitapları keşfedin!</p>
        </section>
    </main>
    @await Component.InvokeAsync("_DefaultFooterPartials")

    <script>
        let cart = []; // Başlangıçta boş bırakıyoruz, sayfa yüklendiğinde server'dan çekeceğiz
        const cartItemCountSpan = document.getElementById('cart-item-count'); // Header'daki sepet sayısı
        const cartItemsContainer = document.getElementById('cart-items-container'); // Sepet listesini göstereceğimiz div
        const cartSummary = document.getElementById('cart-summary');
        const booksSubtotalPriceSpan = document.getElementById('books-subtotal-price');
        const vatAmountSpan = document.getElementById('vat-amount');
        const shippingFeeSpan = document.getElementById('shipping-fee');
        const finalTotalPriceSpan = document.getElementById('final-total-price');
        const checkoutButton = document.getElementById('checkout-button');
        const emptyCartMessage = document.getElementById('empty-cart-message');

        const VAT_RATE = 0.18;
        const SHIPPING_FEE = 15.00;

        // AntiForgeryToken'ı cookie'den almak için yardımcı fonksiyon
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        // Sepet sayısını güncelleyen fonksiyon (Header için)
        function updateCartCount() {
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            if (cartItemCountSpan) {
                cartItemCountSpan.textContent = totalItems;
                if (totalItems > 0) {
                    cartItemCountSpan.classList.add('bounce');
                    setTimeout(() => {
                        cartItemCountSpan.classList.remove('bounce');
                    }, 500);
                } else {
                    cartItemCountSpan.classList.remove('bounce');
                }
            }
        }

        // localStorage'ı güncelleyen ve UI'ı render eden fonksiyon
        function saveCartAndRender() {
            localStorage.setItem('kitapDunyasiCart', JSON.stringify(cart));
            updateCartCount(); // Header'daki sepet sayısını güncelle
            renderCartItems(); // Sepet sayfasındaki ürünleri render et
        }

        // Sepet içeriğini HTML'e render eden fonksiyon
        function renderCartItems() {
            cartItemsContainer.innerHTML = '';
            let booksSubtotal = 0;

            if (cart.length === 0) {
                emptyCartMessage.style.display = 'block';
                cartSummary.style.display = 'none';
                checkoutButton.style.display = 'none';
                return;
            }

            emptyCartMessage.style.display = 'none';
            cartSummary.style.display = 'block';
            checkoutButton.style.display = 'block';

            cart.forEach(item => {
                const itemTotal = item.price * item.quantity;
                booksSubtotal += itemTotal;

                let imageUrl = item.imageUrl || '/images/no-image.png';

                if (!imageUrl || imageUrl === '' || imageUrl === 'undefined' || imageUrl === 'null') {
                    imageUrl = '/images/no-image.png';
                }

                const cartItemDiv = document.createElement('div');
                cartItemDiv.classList.add('cart-item');
                cartItemDiv.dataset.productId = item.id;

                cartItemDiv.innerHTML = `
                    <div class="cart-item-image">
                        <img src="${imageUrl}" onerror="this.onerror=null;this.src='/images/no-image.png';" alt="${item.name}" />
                    </div>
                    <div class="cart-item-details">
                        <div class="cart-item-title">${item.name}</div>
                        <div class="cart-item-price">₺${item.price.toFixed(2)}</div>
                    </div>
                    <div class="cart-item-quantity">
                        <button data-action="decrease">-</button>
                        <span>${item.quantity}</span>
                        <button data-action="increase">+</button>
                    </div>
                    <button class="remove-item-btn" data-action="remove">Sil</button>
                `;
                cartItemsContainer.appendChild(cartItemDiv);
            });

            const vatAmount = booksSubtotal * VAT_RATE;
            const finalTotal = booksSubtotal + vatAmount + SHIPPING_FEE;

            booksSubtotalPriceSpan.textContent = `₺${booksSubtotal.toFixed(2)}`;
            vatAmountSpan.textContent = `₺${vatAmount.toFixed(2)}`;
            shippingFeeSpan.textContent = `₺${SHIPPING_FEE.toFixed(2)}`;
            finalTotalPriceSpan.textContent = `₺${finalTotal.toFixed(2)}`;
        }

        // Sepet öğelerinin miktarını güncelleme veya silme işlemleri için event handler
        async function handleCartActions(event) {
            const target = event.target;
            const cartItemDiv = target.closest('.cart-item');
            const productId = parseInt(cartItemDiv?.dataset.productId);
            if (isNaN(productId)) return;

            let change = 0;
            let actionType = '';

            if (target.dataset.action === 'increase') {
                change = 1;
                actionType = 'update';
            } else if (target.dataset.action === 'decrease') {
                change = -1;
                actionType = 'update';
            } else if (target.dataset.action === 'remove') {
                actionType = 'remove';
            }

            try {
                let url = '';
                let method = 'POST';
                let bodyData = {};
                let contentType = 'application/json'; // Default to JSON

                if (actionType === 'update') {
                    url = '/Basket/UpdateBasketItemQuantity';
                    bodyData = { productId: productId, change: change };
                } else if (actionType === 'remove') {
                    url = '/Basket/RemoveFromBasket';
                    bodyData = { productId: productId };
                }

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': contentType,
                        'RequestVerificationToken': getCookie('RequestVerificationToken')
                    },
                    body: JSON.stringify(bodyData) // JSON body gönderiyoruz
                });

                if (response.ok) {
                    console.log(`Server-side sepet ${actionType} başarılı.`);
                    await fetchAndRenderServerCart(); // Server'dan güncel sepeti çekip render et
                } else {
                    console.error(`Server-side sepet öğesi ${actionType} edilirken hata oluştu:`, response.statusText);
                    const errorText = await response.text();
                    console.error('Server hata yanıtı:', errorText);
                    alert('Sepet güncellenirken bir hata oluştu. Lütfen tekrar deneyin.');
                    await fetchAndRenderServerCart(); // Hata durumunda da server'dan güncel durumu çek
                }
            } catch (error) {
                console.error(`AJAX ${actionType} isteği gönderilirken hata:`, error);
                alert('Ağ hatası: Sepet güncellenemedi.');
                await fetchAndRenderServerCart();
            }
        }

        if (cartItemsContainer) {
            cartItemsContainer.addEventListener('click', handleCartActions);
        }

        if (checkoutButton) {
            checkoutButton.addEventListener('click', async (e) => {
                e.preventDefault();

                if (cart.length === 0) {
                    alert("Sepetiniz boş. Lütfen önce ürün ekleyin.");
                    return;
                }

                try {
                    const response = await fetch('/Basket/CheckLoginStatus');
                    const data = await response.json();

                    if (data.isLoggedIn) {
                        window.location.href = '/Order/Index';
                    } else {
                        alert("Siparişi tamamlamak için lütfen giriş yapın.");
                        window.location.href = '/Account/Login';
                    }
                } catch (error) {
                    console.error('Login durumu kontrol edilirken bir hata oluştu:', error);
                    alert('Bir hata oluştu. Lütfen daha sonra tekrar deneyin.');
                }
            });
        }

        // Bu fonksiyon, Default/Index sayfasından çağrıldığında çalışır.
        // Product bilgilerini alarak server-side sepete ekleme isteği gönderir.
        window.addToCart = async function(product) {
            console.log('Sepete eklenen ürün:', product);

            try {
                const formData = new URLSearchParams();
                formData.append('productId', product.id);
                formData.append('quantity', 1);

                const response = await fetch('/Basket/AddToBasket', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        'RequestVerificationToken': getCookie('RequestVerificationToken')
                    },
                    body: formData.toString()
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('Ürün server-side sepete başarıyla eklendi:', data);
                    await fetchAndRenderServerCart(); // Server'dan güncel sepeti çek ve UI'ı güncelle
                } else {
                    console.error('Server-side sepete ürün eklenirken hata:', response.statusText);
                    const errorText = await response.text();
                    console.error('Server hata yanıtı:', errorText);
                    alert('Ürün sepete eklenirken bir hata oluştu. Lütfen tekrar deneyin.');
                }
            } catch (error) {
                console.error('AJAX add-to-basket isteği gönderilirken hata:', error);
                alert('Ağ hatası: Ürün sepete eklenemedi.');
            }
        };


        // Sayfa yüklendiğinde ilk olarak server'dan sepeti çekip render eden fonksiyon
        async function fetchAndRenderServerCart() {
            try {
                const response = await fetch('/Basket/GetBasketItems');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        cart = data.items; // Server'dan gelen verilerle client sepetini güncelle
                        saveCartAndRender(); // localStorage'ı ve UI'ı güncelle
                        console.log('Client-side sepet server verisi ile senkronize edildi.');
                    } else {
                        // Eğer success false dönerse (örneğin kullanıcı giriş yapmamışsa)
                        cart = []; // Sepeti boşalt
                        saveCartAndRender();
                        console.log('Kullanıcı giriş yapmamış veya sepet boş, sepet sıfırlandı.');
                    }
                } else {
                    console.error('Server sepeti çekilirken hata:', response.statusText);
                }
            } catch (error) {
                console.error('Server sepetini çekme hatası:', error);
            }
        }


        // Sayfa yüklendiğinde ilk olarak server'dan sepeti çek
        document.addEventListener('DOMContentLoaded', async () => {
            await fetchAndRenderServerCart();
        });
    </script>
</body>
</html>