@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kitap Dünyası - Sepetim</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
    <link rel="stylesheet" href="~/css/WebSite.css" />
    <link rel="stylesheet" href="~/css/StyleSheet.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <style>
        .cart-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 10px;
            border-bottom: 1px solid #ccc;
            transition: opacity 0.3s ease; /* Yüklenme efekti için geçiş eklendi */
        }

        .cart-item-image {
            width: 80px;
            height: 100px;
            flex-shrink: 0;
            overflow: hidden;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

        .cart-item-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }

        /* --- YENİ ADET SEÇİCİ STİLLERİ --- */

        .quantity-selector {
            display: flex;
            align-items: center;
            gap: 10px; /* Butonlar ve sayı arasında boşluk */
        }

        .quantity-btn {
            width: 32px; /* Sabit genişlik */
            height: 32px; /* Sabit yükseklik */
            border-radius: 50%; /* Tamamen yuvarlak butonlar */
            border: 1px solid #ddd;
            background-color: #fff;
            color: #555;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            transition: all 0.2s ease; /* Tüm değişiklikler için yumuşak geçiş */
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        }

        .quantity-btn:hover {
            background-color: #f0f0f0;
            transform: scale(1.1); /* Üzerine gelince hafifçe büyüt */
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .quantity-btn:active {
            transform: scale(0.95); /* Tıklanma anında küçülme efekti */
            background-color: #e9ecef;
        }

        .quantity-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: scale(1);
        }
        
        .quantity-value {
            font-weight: bold;
            font-size: 16px;
            min-width: 25px; /* 1 ve 10 gibi farklı basamak sayılarında kaymayı engeller */
            text-align: center;
        }

        /* --- ESKİ STİLLER --- */

        .remove-item-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
        }

        .remove-item-btn:hover {
            background: #c82333;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none; /* Yüklenirken tekrar tıklamayı engelle */
        }
    </style>

    @Html.AntiForgeryToken()
</head>
<body>
    @await Component.InvokeAsync("_DefaultHeaderPartials")
    <main>
        <section class="cart-section container">
            <h2>Sepetim</h2>
            <div id="cart-items-container" class="cart-items"></div>
            <div id="cart-summary" class="cart-summary">
                <div>
                    <span>Kitapların Toplam Fiyatı:</span>
                    <span id="books-subtotal-price">₺0.00</span>
                </div>
                <div>
                    <span>KDV (%18):</span>
                    <span id="vat-amount">₺0.00</span>
                </div>
                <div>
                    <span>Kargo Ücreti:</span>
                    <span id="shipping-fee">₺0.00</span>
                </div>
                <div class="total-price-final">
                    <span>Genel Toplam:</span>
                    <span id="final-total-price">₺0.00</span>
                </div>
            </div>
            <a href="/Order/Index/" id="checkout-button" class="checkout-btn" style="display: none;">Siparişi Tamamla</a>
            <p id="empty-cart-message" class="empty-cart-message">Sepetinizde henüz ürün bulunmamaktadır. Hadi kitapları keşfedin!</p>
        </section>
    </main>
    @await Component.InvokeAsync("_DefaultFooterPartials")

    <script>
        let cart = [];
        const cartItemCountSpan = document.getElementById('cart-item-count');
        const cartItemsContainer = document.getElementById('cart-items-container');
        const cartSummary = document.getElementById('cart-summary');
        const booksSubtotalPriceSpan = document.getElementById('books-subtotal-price');
        const vatAmountSpan = document.getElementById('vat-amount');
        const shippingFeeSpan = document.getElementById('shipping-fee');
        const finalTotalPriceSpan = document.getElementById('final-total-price');
        const checkoutButton = document.getElementById('checkout-button');
        const emptyCartMessage = document.getElementById('empty-cart-message');

        const VAT_RATE = 0.18;
        const SHIPPING_FEE = 15.00;

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        function updateCartCount() {
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            if (cartItemCountSpan) {
                cartItemCountSpan.textContent = totalItems;
                if (totalItems > 0) {
                    cartItemCountSpan.classList.add('bounce');
                    setTimeout(() => {
                        cartItemCountSpan.classList.remove('bounce');
                    }, 500);
                } else {
                    cartItemCountSpan.classList.remove('bounce');
                }
            }
        }

        function saveCartToLocalStorage() {
            localStorage.setItem('kitapDunyasiCart', JSON.stringify(cart));
            updateCartCount();
        }

        function renderCartItems() {
            cartItemsContainer.innerHTML = '';
            let booksSubtotal = 0;

            if (cart.length === 0) {
                emptyCartMessage.style.display = 'block';
                cartSummary.style.display = 'none';
                checkoutButton.style.display = 'none';
                return;
            }

            emptyCartMessage.style.display = 'none';
            cartSummary.style.display = 'block';
            checkoutButton.style.display = 'block';

            cart.forEach(item => {
                const itemTotal = item.price * item.quantity;
                booksSubtotal += itemTotal;

                let imageUrl = item.imageUrl || '/images/no-image.png';
                if (!imageUrl || imageUrl === '' || imageUrl === 'undefined' || imageUrl === 'null') {
                    imageUrl = '/images/no-image.png';
                }

                const cartItemDiv = document.createElement('div');
                cartItemDiv.classList.add('cart-item');
                cartItemDiv.dataset.productId = item.id;

                // --- HTML YAPISI YENİ BUTONLARLA GÜNCELLENDİ ---
                cartItemDiv.innerHTML = `
                    <div class="cart-item-image">
                        <img src="${imageUrl}" onerror="this.onerror=null;this.src='/images/no-image.png';" alt="${item.name}" />
                    </div>
                    <div class="cart-item-details">
                        <div class="cart-item-title">${item.name}</div>
                        <div class="cart-item-price">₺${item.price.toFixed(2)}</div>
                    </div>
                    <div class="quantity-selector">
                        <button class="quantity-btn" data-action="decrease" ${item.quantity <= 1 ? 'disabled' : ''}>
                            <i class="fas fa-minus"></i>
                        </button>
                        <span class="quantity-value">${item.quantity}</span>
                        <button class="quantity-btn" data-action="increase">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <button class="remove-item-btn" data-action="remove">Sil</button>
                `;
                cartItemsContainer.appendChild(cartItemDiv);
            });

            const vatAmount = booksSubtotal * VAT_RATE;
            const finalTotal = booksSubtotal + vatAmount + SHIPPING_FEE;

            booksSubtotalPriceSpan.textContent = `₺${booksSubtotal.toFixed(2)}`;
            vatAmountSpan.textContent = `₺${vatAmount.toFixed(2)}`;
            shippingFeeSpan.textContent = `₺${SHIPPING_FEE.toFixed(2)}`;
            finalTotalPriceSpan.textContent = `₺${finalTotal.toFixed(2)}`;
        }

        async function handleCartActions(event) {
            const target = event.target.closest('.quantity-btn, .remove-item-btn');
            if (!target) return; // Buton veya içindeki ikon tıklanmadıysa çık

            const cartItemDiv = target.closest('.cart-item');
            if (!cartItemDiv) return;

            const productId = parseInt(cartItemDiv.dataset.productId);
            if (isNaN(productId)) return;
            
            // İşlem başladığında görsel geri bildirim ver
            cartItemDiv.classList.add('loading');
            
            let actionType = target.dataset.action;
            let change = 0;

            if (actionType === 'increase') {
                change = 1;
            } else if (actionType === 'decrease') {
                change = -1;
            }
            
            try {
                let url = '';
                let bodyData = {};

                if (actionType === 'increase' || actionType === 'decrease') {
                    url = '/Basket/UpdateBasketItemQuantity';
                    bodyData = { productId: productId, change: change };
                } else if (actionType === 'remove') {
                    url = '/Basket/RemoveFromBasket';
                    bodyData = { productId: productId };
                }

                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCookie('RequestVerificationToken')
                    },
                    body: JSON.stringify(bodyData)
                });

                if (response.ok) {
                    await fetchAndRenderServerCart();
                } else {
                    console.error(`Server-side sepet işlemi (${actionType}) hatası:`, response.statusText);
                    alert('Sepet güncellenirken bir hata oluştu. Lütfen tekrar deneyin.');
                    cartItemDiv.classList.remove('loading'); // Hata durumunda yüklenme efektini kaldır
                }
            } catch (error) {
                console.error(`AJAX (${actionType}) isteği hatası:`, error);
                alert('Ağ hatası: Sepet güncellenemedi.');
                cartItemDiv.classList.remove('loading'); // Hata durumunda yüklenme efektini kaldır
            }
        }

        if (cartItemsContainer) {
            cartItemsContainer.addEventListener('click', handleCartActions);
        }

        if (checkoutButton) {
            checkoutButton.addEventListener('click', async (e) => {
                e.preventDefault();

                if (cart.length === 0) {
                    alert("Sepetiniz boş. Lütfen önce ürün ekleyin.");
                    return;
                }

                try {
                    const response = await fetch('/Basket/CheckLoginStatus');
                    const data = await response.json();

                    if (data.isLoggedIn) {
                        window.location.href = '/Order/Index';
                    } else {
                        alert("Siparişi tamamlamak için lütfen giriş yapın.");
                        window.location.href = '/Account/Login';
                    }
                } catch (error) {
                    console.error('Login durumu kontrol edilirken bir hata oluştu:', error);
                    alert('Bir hata oluştu. Lütfen daha sonra tekrar deneyin.');
                }
            });
        }

        async function fetchAndRenderServerCart() {
            try {
                const response = await fetch('/Basket/GetBasketItems');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        cart = data.items;
                    } else {
                        cart = [];
                        console.log('Sunucu sepeti boş veya kullanıcı giriş yapmamış:', data.message);
                    }
                } else {
                    console.error('Server sepeti çekilirken HTTP hatası:', response.status);
                    cart = [];
                }
            } catch (error) {
                console.error('Server sepetini çekme hatası:', error);
                cart = [];
            } finally {
                saveCartToLocalStorage();
                renderCartItems();
            }
        }

        document.addEventListener('DOMContentLoaded', async () => {
            await fetchAndRenderServerCart();
        });
    </script>
</body>
</html>