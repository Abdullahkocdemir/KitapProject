@using KitapProject.Entities
@model List<Product>

@{
    Layout = null; 
}

<!DOCTYPE html>
<html lang="tr">
<head>
    @Html.AntiForgeryToken()
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kitap Dünyası - Kitaplarımızı Keşfet</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="~/css/WebSite.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>

    @await Component.InvokeAsync("_DefaultHeaderPartials")

    <main>
        @await Component.InvokeAsync("_DefaultBannerPartials")

        @await Component.InvokeAsync("_DefaultPopulerCategoryPartials")

        @await Component.InvokeAsync("_DefaultPopulerProductPartials")

        @await Component.InvokeAsync("_DefaultCountNumberPartials")

        @await Component.InvokeAsync("_DefaultLayoutTestimonialPartials")

        

        @await Component.InvokeAsync("_DefaultInspiringLinesoftheDayPartials")

        @await Component.InvokeAsync("_DefaultMembershipPartials")
    </main>

    @await Component.InvokeAsync("_DefaultFooterPartials")

    <script>
        let cart = JSON.parse(localStorage.getItem('kitapDunyasiCart')) || [];
        const cartItemCountSpan = document.getElementById('cart-item-count');
        function getAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            if (tokenInput) {
                return tokenInput.value;
            }
            const tokenMeta = document.querySelector('meta[name="__RequestVerificationToken"]');
            if (tokenMeta) {
                return tokenMeta.getAttribute('content');
            }
            const value = `; ${document.cookie}`;
            const parts = value.split(`; __RequestVerificationToken=`);
            if (parts.length === 2) {
                return parts.pop().split(';').shift();
            }
            return null;
        }

        function saveCartToLocalStorage() {
            localStorage.setItem('kitapDunyasiCart', JSON.stringify(cart));
            updateCartCount(); 
        }

        function updateCartCount() {
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            if (cartItemCountSpan) {
                cartItemCountSpan.textContent = totalItems;
                if (totalItems > 0) {
                    cartItemCountSpan.classList.add('bounce');
                    setTimeout(() => {
                        cartItemCountSpan.classList.remove('bounce');
                    }, 500);
                } else {
                    cartItemCountSpan.classList.remove('bounce');
                }
            }
        }

        async function fetchCartItemCountFromServer() {
            try {
                const response = await fetch('/Basket/GetCartItemCount');
                if (response.ok) {
                    const data = await response.json();
                    if (cartItemCountSpan) {
                        cartItemCountSpan.textContent = data.count;
                    }
                } else {
                    console.error('Server sepet sayısını çekerken hata:', response.statusText);
                }
            } catch (error) {
                console.error('Ağ hatası: Sepet sayısı alınamadı.', error);
            }
        }

        async function addProductToCartAndServer(product) {
            console.log('Ürün sepete ekleniyor (Client Side Önce):', product);

            const existing = cart.find(item => item.id === product.id);
            if (existing) {
                existing.quantity++;
            } else {
                let imageUrl = product.imageUrl || '/images/no-image.png';
                if (!imageUrl || imageUrl === '' || imageUrl === 'undefined' || imageUrl === 'null') {
                    imageUrl = '/images/no-image.png';
                }
                cart.push({ ...product, quantity: 1, imageUrl: imageUrl });
            }
            saveCartToLocalStorage(); 

            try {
                const token = getAntiForgeryToken();
                console.log('CSRF Token (gönderilen):', token); 

                const formData = new URLSearchParams();
                formData.append('productId', product.id);
                formData.append('quantity', 1);
                
                if (token) {
                    formData.append('__RequestVerificationToken', token);
                }

                const response = await fetch('/Basket/AddToBasket', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    },
                    body: formData.toString()
                });

                console.log('Server yanıt durumu:', response.status); 
                console.log('Server yanıt başlıkları:', response.headers); 

                if (response.ok) {
                    const data = await response.json();
                    console.log('Server-side sepete ürün başarıyla eklendi. Server yanıtı:', data);
                    
                    if (data.success) {
                        await fetchCartItemCountFromServer();
                        return true;
                    } else {
                        throw new Error(data.message || 'Sunucu tarafında işlem başarısız oldu.');
                    }
                } else {
                    const errorText = await response.text(); 
                    console.error('Server yanıt hatası:', response.status, errorText);

                    if (existing) {
                        existing.quantity--;
                        if (existing.quantity === 0) {
                            cart = cart.filter(item => item.id !== product.id);
                        }
                    } else {
                        cart = cart.filter(item => item.id !== product.id);
                    }
                    saveCartToLocalStorage(); 
                    await fetchCartItemCountFromServer(); 

                    throw new Error(`Ürün sepete eklenirken bir sunucu hatası oluştu: [HTTP ${response.status}] ${errorText}`);
                }
            } catch (error) {
                console.error('AJAX isteği gönderilirken ağ hatası:', error);
                
                if (existing) {
                    existing.quantity--;
                    if (existing.quantity === 0) {
                        cart = cart.filter(item => item.id !== product.id);
                    }
                } else {
                    cart = cart.filter(item => item.id !== product.id);
                }
                saveCartToLocalStorage();
                await fetchCartItemCountFromServer();

                throw new Error(`Ağ hatası: Ürün sepete eklenemedi. Detay: ${error.message}`);
            }
        }

        const quotes = [
            { quote: "Okumak, bilginin en derin kuyularından kana kana içmek gibidir. Her yeni sayfa, yeni bir dünyaya açılan kapısıdır.", author: "Mevlana" },
            { quote: "İnsan ruhunun gıdası kitaplardır. Okudukça büyür, gelişimini sürdürür ve hayatı daha derinden anlar.", author: "Fyodor Dostoyevski" },
            { quote: "Bir kitap, uykusuz bir gecenin ve sonsuz bir düşüncenin ürünüdür.", author: "George Orwell" },
            { quote: "En iyi arkadaşım, bana okumadığım bir kitabı veren kişidir.", author: "Abraham Lincoln" },
            { quote: "Kitaplar, hiç kapanmayan pencerelerdir.", author: "Nazım Hikmet" },
            { quote: "Okumadan geçen bir gün, kaybolmuş bir gündür.", author: "Anonim" }
        ];

        let currentQuoteIndex = 0;
        const dailyQuoteElement = document.getElementById('daily-quote');
        const quoteAuthorElement = document.getElementById('quote-author');
        const newQuoteButton = document.getElementById('new-quote-btn');

        function displayQuote() {
            if (!dailyQuoteElement || !quoteAuthorElement) return;

            dailyQuoteElement.classList.add('fade-out');
            quoteAuthorElement.classList.add('fade-out');

            setTimeout(() => {
                const quote = quotes[currentQuoteIndex];
                dailyQuoteElement.textContent = `"${quote.quote}"`;
                quoteAuthorElement.textContent = `- ${quote.author}`;

                dailyQuoteElement.classList.remove('fade-out');
                quoteAuthorElement.classList.remove('fade-out');
                dailyQuoteElement.classList.add('fade-in-quote');
                quoteAuthorElement.classList.add('fade-in-quote');

                setTimeout(() => {
                    dailyQuoteElement.classList.remove('fade-in-quote');
                    quoteAuthorElement.classList.remove('fade-in-quote');
                }, 1000);
            }, 300);

            currentQuoteIndex = (currentQuoteIndex + 1) % quotes.length;
        }

        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        function observeSectionsForAnimations() {
            document.querySelectorAll('.dynamic-section, .stats-section, .testimonials-section, .quote-of-the-day-section, .call-to-action-section').forEach(el => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
                el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
                observer.observe(el);
            });
        }


        document.addEventListener('DOMContentLoaded', () => {
            fetchCartItemCountFromServer();

            attachGlobalEventListeners();
            
            displayQuote();
            if (newQuoteButton) {
                newQuoteButton.addEventListener('click', displayQuote);
            }

            observeSectionsForAnimations();

            document.querySelector('.hero-section h1').style.animationPlayState = 'running';
            document.querySelector('.hero-section p').style.animationPlayState = 'running';
            document.querySelector('.cta-buttons').style.animationPlayState = 'running';
        });

        function attachGlobalEventListeners() {
            const searchBtn = document.getElementById('search-btn');
            const searchInput = document.getElementById('search-input');
            if (searchBtn && searchInput) {
                searchBtn.addEventListener('click', () => {
                    const searchTerm = searchInput.value.trim();
                    alert(`"${searchTerm}" için arama yapılıyor... (Bu bir demo özelliğidir)`);
                });
                searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        searchBtn.click();
                    }
                });
            }

            const cartContainer = document.getElementById('cart-container');
            if (cartContainer) {
                cartContainer.addEventListener('click', () => {
                    window.location.href = '/Basket/Index';
                });
            }
            
            // GÜNCELLENEN BÖLÜM BURASI
            document.querySelectorAll('.book-card .btn-primary-book-action').forEach(button => {
                button.addEventListener('click', async function() {
                    const loginStatusResponse = await fetch('/Basket/CheckLoginStatus');
                    const loginStatusData = await loginStatusResponse.json();

                    if (!loginStatusData.isLoggedIn) {
                        // 'alert' yerine SweetAlert2 kullanılıyor
                        Swal.fire({
                            title: 'Giriş Gerekli',
                            text: "Sepete ürün eklemek için lütfen giriş yapmalısınız.",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Giriş Yap',
                            cancelButtonText: 'Vazgeç'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/Account/Login';
                            }
                        });
                        return; 
                    }

                    const bookToAdd = {
                        id: parseInt(this.dataset.bookId),
                        name: this.dataset.bookName,
                        price: parseFloat(this.dataset.bookPrice),
                        imageUrl: this.dataset.bookImageurl
                    };

                    try {
                        await addProductToCartAndServer(bookToAdd);
                        // 'alert' yerine SweetAlert2 toast bildirimi kullanılıyor
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: `${bookToAdd.name} sepete eklendi!`,
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    } catch (error) {
                        console.error("Sepete ekleme işlemi başarısız:", error);
                        // 'alert' yerine SweetAlert2 hata bildirimi kullanılıyor
                        Swal.fire({
                            icon: 'error',
                            title: 'Hata Oluştu',
                            text: `Ürün sepete eklenirken bir hata oluştu: ${error.message}`,
                        });
                    }
                });
            });

            document.querySelectorAll('.book-card .btn-secondary-book-action').forEach(button => {
                button.addEventListener('click', function() {
                    const bookTitle = this.closest('.book-content').querySelector('.book-title').textContent;
                    const bookId = this.dataset.bookId;
                    alert(`${bookTitle} (ID: ${bookId}) şimdi okunuyor... (Bu bir demo özelliğidir)`);
                });
            });

            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });
        }
    </script>
</body>
</html>