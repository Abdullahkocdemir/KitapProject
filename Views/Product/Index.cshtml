@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kitap Mağazası</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/Product.css" />
@*     <link rel="stylesheet" href="~/css/WebSite.css" />
 *@    @* CSRF Token için HEAD içine ekledik *@
    @Html.AntiForgeryToken()
    <style>
                /* Responsive Ayarlamalar */
        @@media (max-width: 992px) {
            .nav-menu {
                gap: 15px;
            }
            .header-actions {
                gap: 10px;
            }
        }
                .user-greeting {
            color: var(--text-light);
            font-weight: 500;
            font-size: 1rem;
        }
        .header-actions {
            display: flex;
            align-items: center;
            gap: 15px; 
                    .cart-container {
            position: relative;
            color: var(--text-dark);
            text-decoration: none;
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            padding: 5px;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }
                .header-actions {
            display: flex;
            align-items: center;
            gap: 15px; /* Aksiyon öğeleri arasında boşluk */
        }

        .cart-container:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .cart-icon {
            margin-right: 5px;
        }

        .cart-count {
            background-color: #FF6347; /* Domates kırmızısı */
            color: white;
            font-size: 0.8rem;
            font-weight: bold;
            border-radius: 50%;
            padding: 3px 7px;
            position: absolute;
            top: -8px;
            right: -8px;
            min-width: 20px;
            text-align: center;
            line-height: 1;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
        }
                .user-greeting {
            color: var(--text-light);
            font-weight: 500;
            font-size: 1rem;
        }
    </style>
</head>
<body>
    @await Component.InvokeAsync("_DefaultHeaderPartials")

    <div class="search-container">
        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Kitap ara...">
            <i class="fas fa-search"></i>
        </div>
    </div>

    <div class="content-wrapper">
        <aside class="sidebar">
            <h3>Kategoriler</h3>
            <ul class="category-list" id="categoryList">
            </ul>
        </aside>

        <main class="main-content">
            <h2 class="section-title" id="categoryTitle">Tüm Kitaplar</h2>

            <div id="booksContainer">
                <div class="books-grid" id="booksGrid">
                </div>
            </div>

            <div id="loadingSpinner" class="loading" style="display: none;">
                <div class="loading-spinner"></div>
            </div>
        </main>
    </div>

    <script>
        const categoryList = document.getElementById('categoryList');
        const booksGrid = document.getElementById('booksGrid');
        const categoryTitle = document.getElementById('categoryTitle');
        const searchInput = document.getElementById('searchInput');
        const loadingSpinner = document.getElementById('loadingSpinner');

        let currentFilteredBooks = [];
        let activeCategory = 'all';

        // CSRF Token için cookie okuma fonksiyonu
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        async function fetchAndRenderCategories() {
            try {
                const response = await fetch('/Product/GetCategories');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const categories = await response.json();
                categoryList.innerHTML = '';

                categories.forEach(category => {
                    const listItem = document.createElement('li');
                    const button = document.createElement('button');
                    button.classList.add('category-btn');
                    button.dataset.category = category.name;
                    button.innerHTML = `<i class="${category.icon}"></i> ${category.displayName}`;
                    listItem.appendChild(button);
                    categoryList.appendChild(listItem);
                });

                document.querySelectorAll('.category-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        document.querySelectorAll('.category-btn').forEach(btn => btn.classList.remove('active'));
                        event.currentTarget.classList.add('active');

                        activeCategory = event.currentTarget.dataset.category;
                        fetchAndRenderBooks(activeCategory, searchInput.value);
                    });
                });

                const allButton = document.querySelector('.category-btn[data-category="all"]');
                if (allButton) {
                    allButton.classList.add('active');
                }

            } catch (error) {
                console.error("Kategoriler yüklenirken hata oluştu:", error);
                categoryList.innerHTML = '<li>Kategoriler yüklenemedi.</li>';
            }
        }

        function renderBooks(booksToRender) {
            if (booksToRender.length === 0) {
                booksGrid.innerHTML = `
                        <div style="grid-column: 1 / -1; text-align: center; padding: 4rem 2rem; color: rgba(255, 255, 255, 0.7); font-size: 1.2rem;">
                            <i class="fas fa-search" style="font-size: 4rem; margin-bottom: 1rem; color: rgba(255, 255, 255, 0.3);"></i>
                            <p>Aradığınız kriterlere uygun kitap bulunamadı.</p>
                        </div>
                    `;
                return;
            }

            booksGrid.innerHTML = booksToRender.map(book => `
                        <div class="book-card">
                            <div class="book-image" style="background-image: url('${book.image}'); background-size: cover; background-position: center;">
                                ${!book.image || book.image.includes('placeholder') || book.image.length < 5 ? 'Görsel Yok' : ''}
                            </div>
                            <div class="book-content">
                                <h3 class="book-title">${book.title}</h3>
                                <p class="book-author">${book.author}</p>
                                <div class="book-price">₺${book.price.toFixed(2)}</div>
                                <div class="book-actions">
                                    <button class="btn btn-primary" onclick="addToCart(${book.id})">
                                        <i class="fas fa-shopping-cart"></i> Sepete Ekle
                                    </button>
                                    <button class="btn btn-secondary" onclick="viewDetails(${book.id})">
                                        <i class="fas fa-eye"></i> Detay
                                    </button>
                                </div>
                            </div>
                        </div>
                    `).join('');
        }

        function showLoading() {
            loadingSpinner.style.display = 'flex';
            booksGrid.style.display = 'none';
        }

        function hideLoading() {
            loadingSpinner.style.display = 'none';
            booksGrid.style.display = 'grid';
        }

        async function fetchAndRenderBooks(category = 'all', searchTerm = '') {
            showLoading();
            try {
                const url = `/Product/GetProducts?categoryName=${category}&searchTerm=${searchTerm}`;
                const response = await fetch(url);

                if (!response.ok) {
                    // response.json() hata fırlatabilir, bu yüzden try-catch bloğunda ele al
                    try {
                        const errorData = await response.json();
                        if (response.status === 404) {
                            renderBooks([]);
                            categoryTitle.textContent = categoryTitles[category] || 'Kitaplar';
                            hideLoading();
                            return;
                        }
                        throw new Error(`HTTP error! status: ${response.status} - ${errorData.message || response.statusText}`);
                    } catch (jsonError) {
                        // Yanıt JSON değilse veya parse hatası verirse
                        const errorText = await response.text();
                        console.error('API yanıtı JSON değil:', errorText);
                        throw new Error(`HTTP error! status: ${response.status} - Beklenmedik yanıt formatı.`);
                    }
                }

                const books = await response.json();
                currentFilteredBooks = books;
                renderBooks(currentFilteredBooks);
                categoryTitle.textContent = categoryTitles[category] || 'Kitaplar';
            } catch (error) {
                console.error("Kitaplar yüklenirken hata oluştu:", error);
                booksGrid.innerHTML = `
                        <div style="grid-column: 1 / -1; text-align: center; padding: 4rem 2rem; color: rgba(255, 255, 255, 0.7); font-size: 1.2rem;">
                            <p>Kitaplar yüklenemedi. Lütfen daha sonra tekrar deneyin.</p>
                            <p style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.5);">Hata: ${error.message}</p>
                        </div>
                    `;
            } finally {
                hideLoading();
            }
        }

        searchInput.addEventListener('input', () => {
            fetchAndRenderBooks(activeCategory, searchInput.value);
        });

        const categoryTitles = {
            'all': 'Tüm Kitaplar',
            'roman': 'Roman Kitapları',
            'bilim-kurg': 'Bilim Kurgu Kitapları',
            'tarih': 'Tarih Kitapları',
            'biyografi': 'Biyografi Kitapları',
            'felsefe': 'Felsefe Kitapları',
            'cocuk': 'Çocuk Kitapları',
            'sanat': 'Sanat Kitapları',
            'psikoloji': 'Psikoloji Kitapları'
        };

        async function addToCart(bookId) {
            const book = currentFilteredBooks.find(b => b.id === bookId);
            if (!book) {
                alert('Hata: Kitap bulunamadı.');
                return;
            }

            try {
                // Sepete eklemeden önce kullanıcının giriş yapmış olup olmadığını kontrol et
                const loginStatusResponse = await fetch('/Basket/CheckLoginStatus');
                const loginStatusData = await loginStatusResponse.json();

                if (!loginStatusData.isLoggedIn) {
                    alert("Sepete ürün eklemek için lütfen giriş yapmalısınız.");
                    window.location.href = '/Account/Login'; // Kullanıcıyı login sayfasına yönlendir
                    return; // Fonksiyonu burada durdur
                }

                const formData = new URLSearchParams();
                formData.append('productId', bookId);
                formData.append('quantity', 1);

                const response = await fetch('/Basket/AddToBasket', { // Doğru endpoint
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        'RequestVerificationToken': getCookie('RequestVerificationToken') // CSRF token ekledik
                    },
                    body: formData.toString()
                });

                if (response.ok) {
                    const data = await response.json();
                    alert(data.message);
                    // Başarılı olursa, sepetin global sayacını güncellemek için bir event tetikleyebilirsin
                    // veya ana layout'tan cart count'u çeken bir fonksiyon çağırabilirsin.
                    // Örneğin: window.dispatchEvent(new Event('cartUpdated'));
                } else {
                    // Sunucudan dönen yanıtın içeriğini daha detaylı inceleyelim
                    const errorText = await response.text(); // JSON değilse bile metin olarak al
                    console.error('Server-side sepete ürün eklenirken hata:', response.status, response.statusText, errorText);
                    try {
                        const errorData = JSON.parse(errorText); // JSON parse etmeye çalış
                        alert(`Sepete eklenirken hata oluştu: ${errorData.message || 'Bilinmeyen Hata'}`);
                    } catch (e) {
                        alert(`Sepete eklenirken beklenmedik bir hata oluştu. Lütfen tekrar deneyin. (Sunucu yanıtı: ${errorText.substring(0, 100)}...)`);
                    }
                }
            } catch (error) {
                console.error('AJAX add-to-basket isteği gönderilirken hata:', error);
                alert('Ağ hatası: Ürün sepete eklenemedi. Lütfen internet bağlantınızı kontrol edin.');
            }
        }

        function viewDetails(bookId) {
            const book = currentFilteredBooks.find(b => b.id === bookId);
            if (book) {
                alert(`"${book.title}" detay sayfası açılacak. (ID: ${book.id})`);
                // window.location.href = `/Product/Details/${book.id}`; // Detay sayfasına yönlendirme örneği
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchAndRenderCategories();
            fetchAndRenderBooks();
        });
    </script>
</body>
</html>