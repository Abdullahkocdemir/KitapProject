@model List<KitapProject.DTO.ProductDTO.ResultProductDTO>

@{
    ViewData["Title"] = "Products";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container">
    <div class="page-header">
        <h1 class="page-title">Ürün Yönetimi</h1>
        <p class="page-subtitle">Tüm ürünlerinizi buradan yönetebilirsiniz</p>
    </div>

    <div class="controls-section">
        <div class="filters-row">
            <div class="filters-group">
                <input type="text" id="searchInput" class="form-control" placeholder="🔍 Ürün adına göre ara...">
                <select id="categoryFilter" class="form-select">
                    <option value="">📁 Tüm Kategoriler</option>
                    @foreach (var category in Model?.Select(p => p.CategoryName).Distinct() ?? new List<string>())
                    {
                        <option value="@category.ToLower()">@category</option>
                    }
                </select>
                <select id="itemsPerPage" class="form-select">
                    <option value="5">5 öğe</option>
                    <option value="10" selected>10 öğe</option>
                    <option value="20">20 öğe</option>
                    <option value="50">50 öğe</option>
                </select>
            </div>
            <a href="/Product/Create" class="btn-add">
                <i class="bi bi-plus-circle"></i>
                Yeni Ürün Ekle
            </a>
        </div>
    </div>

    <div class="table-container">
        <div class="loading" id="loading">
            <i class="fas fa-spinner"></i>
            <p>Yükleniyor...</p>
        </div>

        <table class="data-table" id="productTable">
            <thead>
                <tr>
                    <th>Ürün ID</th>
                    <th>Ürün Adı</th>
                    <th>Kategori</th>
                    <th>Popüler</th>
                    <th>Fiyat</th>
                    <th>İşlemler</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td><span class="product-id">@item.ProductId</span></td>
                            <td><span class="product-name">@item.Name</span></td>
                            <td><span class="category-badge">@item.CategoryName</span></td>
                            <td>
                                <span class="popular-badge @(item.PopulerProduct ? "popular-yes" : "popular-no")">
                                    <i class="fas @(item.PopulerProduct ? "fa-star" : "fa-star-o")"></i>
                                    @(item.PopulerProduct ? "Evet" : "Hayır")
                                </span>
                            </td>
                            <td><span class="price">₺@item.Price.ToString("N2")</span></td>
                            <td>
                                <div class="actions-group">
                                    <button class="action-btn btn-view" title="Görüntüle" data-id="@item.ProductId">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="action-btn btn-edit" title="Düzenle" data-id="@item.ProductId">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="action-btn btn-delete" title="Sil" data-id="@item.ProductId" data-name="@item.Name">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div class="no-results" id="noResults" style="display: none;">
            <i class="fas fa-search"></i>
            <h4>Sonuç bulunamadı</h4>
            <p>Arama kriterlerinize uygun ürün bulunamadı.</p>
        </div>
    </div>

    <ul id="pagination" class="pagination"></ul>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    $(document).ready(function () {
        const searchInput = $("#searchInput");
        const categoryFilter = $("#categoryFilter");
        const rowsPerPageSelect = $("#itemsPerPage");
        const pagination = $("#pagination");
        const noResults = $("#noResults");
        const loading = $("#loading");



        let currentPage = 1;
        let filteredProducts = [];

        function renderProducts() {
            const searchTerm = searchInput.val().toLowerCase();
            const selectedCategory = categoryFilter.val().toLowerCase();
            const itemsPerPage = parseInt(rowsPerPageSelect.val());

            // Ürünleri filtrele
            filteredProducts = allProducts.filter(product => {
                const matchesSearch = product.Name.toLowerCase().includes(searchTerm);
                const matchesCategory = selectedCategory === "" || product.CategoryName.toLowerCase() === selectedCategory;
                return matchesSearch && matchesCategory;
            });

            // Sayfalama hesapla
            const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
            if (currentPage > totalPages && totalPages > 0) currentPage = totalPages;
            if (totalPages === 0) currentPage = 1;

            // Loading göster
            loading.show();
            $("#productTable").hide();

            setTimeout(() => {
                loading.hide();
                $("#productTable").show();

                if (filteredProducts.length === 0) {
                    noResults.show();
                    $("#productTable").hide();
                    pagination.empty();
                    return;
                }

                noResults.hide();

                // Mevcut sayfanın ürünlerini göster
                const start = (currentPage - 1) * itemsPerPage;
                const end = start + itemsPerPage;
                const pageProducts = filteredProducts.slice(start, end);

                renderPagination(totalPages);
            }, 300);
        }

        function renderPagination(totalPages) {
            pagination.empty();

            if (totalPages <= 1) return;

            for (let i = 1; i <= totalPages; i++) {
                const pageItem = $(`
                        <li class="page-item ${i === currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `);
                pagination.append(pageItem);
            }
        }

        // Event handlers
        searchInput.on("input", () => {
            currentPage = 1;
            renderProducts();
        });

        categoryFilter.on("change", () => {
            currentPage = 1;
            renderProducts();
        });

        rowsPerPageSelect.on("change", () => {
            currentPage = 1;
            renderProducts();
        });

        pagination.on("click", "a", function (e) {
            e.preventDefault();
            const page = parseInt($(this).data("page"));
            if (!isNaN(page)) {
                currentPage = page;
                renderProducts();
            }
        });

        // Delete button handler
        $(document).on("click", ".btn-delete", function () {
            const productId = parseInt($(this).data("id"));
            const productName = $(this).data("name");

            Swal.fire({
                title: 'Emin misiniz?',
                text: `"${productName}" adlı ürünü silmek istediğinize emin misiniz? Bu işlem geri alınamaz!`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc2626',
                cancelButtonColor: '#64748b',
                confirmButtonText: 'Evet, sil!',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    // AJAX ile silme işlemi
                    $.ajax({
                        url: `/AdminProduct/Delete/${productId}`,
                        type: 'POST',
                        success: function () {
                            const index = allProducts.findIndex(p => p.ProductId === productId);
                            if (index > -1) {
                                allProducts.splice(index, 1);
                            }

                            Swal.fire({
                                title: 'Silindi!',
                                text: `${productName} başarıyla silindi.`,
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });

                            renderProducts();
                        },
                        error: function () {
                            Swal.fire({
                                title: 'Hata!',
                                text: 'Ürün silinirken bir hata oluştu.',
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        });

        // View and Edit button handlers
        $(document).on("click", ".btn-view", function () {
            const productId = $(this).data("id");
            window.location.href = `/Product/Detail/${productId}`;
        });

        $(document).on("click", ".btn-edit", function () {
            const productId = $(this).data("id");
            window.location.href = `/Product/Edit/${productId}`;
        });

        // İlk yükleme
        renderProducts();
    });
</script>