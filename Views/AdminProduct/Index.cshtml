@model List<KitapProject.DTO.ProductDTO.ResultProductDTO>

@{
    ViewData["Title"] = "Ürün Listesi";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var categoriesSelectList = ViewBag.Categories as SelectList;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
<link href="~/css/admin-product.css" rel="stylesheet" />



<div class="container mt-5">
    <h3 class="text-primary">Ürün Yönetimi</h3>

    <div class="filter-section d-flex flex-column flex-md-row justify-content-between align-items-center gap-3 mb-4">
        <input type="text" id="searchInput" class="form-control flex-grow-1" placeholder="Ürün adı veya açıklaması ile ara..." />
        <select id="categoryFilter" class="form-select w-md-auto">
            <option value="">Tüm Kategoriler</option>
            @if (categoriesSelectList != null)
            {
                foreach (var categoryItem in categoriesSelectList)
                {
                    <option value="@categoryItem.Text">@categoryItem.Text</option>
                }
            }
        </select>
        <select id="itemsPerPage" class="form-select w-md-auto">
            <option value="5">5 / sayfa</option>
            <option value="10" selected>10 / sayfa</option>
            <option value="25">25 / sayfa</option>
            <option value="50">50 / sayfa</option>
        </select>
        @if (User.IsInRole("Admin"))
        {
            <a href="/AdminProduct/Create" class="btn btn-primary-custom">
                <i class="bi bi-plus-circle me-1"></i> Yeni Ürün Ekle
            </a>
        }
    </div>

    <div id="productListContainer">
        @foreach (var item in Model)
        {
            <div class="product-card" data-product-id="@item.ProductId" data-product-name="@item.Name.ToLower()" data-category-name="@item.CategoryName.ToLower()">
                <div class="product-info">
                    <h5>@item.Name</h5>
                    <p>Fiyat: <span class="price">₺@item.Price.ToString("N2")</span></p>
                    <span class="category-badge">@item.CategoryName</span>
                </div>
                
                <div class="d-flex flex-column align-items-center gap-2 me-3"> 
                    @if (item.PopulerProduct)
                    {
                        <span class="popular-badge bg-primary-pop">Popüler: Evet</span>
                    }
                    else
                    {
                        <span class="popular-badge bg-secondary-pop">Popüler: Hayır</span>
                    }

                    @if (item.Status)
                    {
                        <span class="status-badge bg-success">Aktif</span>
                    }
                    else
                    {
                        <span class="status-badge bg-danger">Pasif</span>
                    }
                </div>

                <div class="card-actions">
                    <a href="/AdminProduct/Edit/@item.ProductId" class="btn btn-outline-warning btn-sm" title="Düzenle">
                        <i class="bi bi-pencil-square"></i> Düzenle
                    </a>
                    <a href="/AdminProduct/Detail/@item.ProductId" class="btn btn-outline-info btn-sm" title="Detaylar">
                        <i class="bi bi-info-circle"></i> Detay
                    </a>
                    <button type="button" class="btn btn-outline-danger btn-sm delete-btn"
                            data-id="@item.ProductId"
                            data-name="@item.Name"
                            title="Sil">
                        <i class="bi bi-trash"></i> Sil
                    </button>
                    <form id="deleteForm-@item.ProductId" action="/AdminProduct/Delete/@item.ProductId" method="post" style="display:none;">
                        @Html.AntiForgeryToken()
                    </form>
                </div>
            </div>
        }
    </div>

    <nav>
        <ul class="pagination justify-content-center mt-4" id="pagination"></ul>
    </nav>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    $(document).ready(function () {
        const searchInput = $("#searchInput");
        const categoryFilter = $("#categoryFilter");
        const rowsPerPageSelect = $("#itemsPerPage");
        const productCards = $(".product-card");
        const productListContainer = $("#productListContainer");
        const pagination = $("#pagination");

        $(document).on("click", ".delete-btn", function () {
            const productId = $(this).data("id");
            const productName = $(this).data("name");

            Swal.fire({
                title: 'Emin misiniz?',
                text: `"${productName}" adlı ürünü silmek istediğinize emin misiniz? Bu işlem geri alınamaz!`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Evet, sil!',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $(`#deleteForm-${productId}`).submit();
                }
            });
        });

        $(document).on("click", ".toggle-populer-btn", function () {
            const productId = $(this).data("id");
            const currentStatus = $(this).data("current-status") === "true"; 
            const actionText = currentStatus ? "pasif" : "popüler";
            const newStatus = !currentStatus; 

            Swal.fire({
                title: 'Emin misiniz?',
                text: `Ürünü ${actionText} yapmak istediğinize emin misiniz?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/AdminProduct/TogglePopularStatus',
                        type: 'POST',
                        data: { productId: productId, status: newStatus },
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() 
                        },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire('Güncellendi!', 'Ürünün popülerlik durumu başarıyla güncellendi.', 'success')
                                    .then(() => {
                                        location.reload();
                                    });
                            } else {
                                Swal.fire('Hata!', response.message || 'Popülerlik durumu güncellenirken bir hata oluştu.', 'error');
                            }
                        },
                        error: function (xhr, status, error) {
                            Swal.fire('Hata!', 'Sunucuya bağlanırken bir sorun oluştu.', 'error');
                            console.error("AJAX Error: ", status, error);
                        }
                    });
                }
            });
        });

        function renderProductCards() {
            const searchTerm = searchInput.val().toLowerCase();
            const selectedCategory = categoryFilter.val().toLowerCase();
            const itemsPerPage = parseInt(rowsPerPageSelect.val());

            const filteredCards = productCards.filter(function () {
                const productName = $(this).data("product-name");
                const categoryName = $(this).data("category-name");

                const matchesSearch = productName.includes(searchTerm);
                const matchesCategory = (selectedCategory === "" || categoryName === selectedCategory);

                return matchesSearch && matchesCategory;
            });

            productCards.hide(); 
            pagination.empty();

            const pageCount = Math.ceil(filteredCards.length / itemsPerPage);
            let currentPage = 1;

            function showPage(page) {
                currentPage = page;
                filteredCards.hide();
                const start = (page - 1) * itemsPerPage;
                const end = start + itemsPerPage;
                filteredCards.slice(start, end).show();

                pagination.empty();
                if (pageCount > 1) {
                    pagination.append(`
                        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                            <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    `);

                    for (let i = 1; i <= pageCount; i++) {
                        pagination.append(
                            `<li class="page-item ${i === currentPage ? 'active' : ''}">
                                <a class="page-link" href="#" data-page="${i}">${i}</a>
                            </li>`
                        );
                    }

                    pagination.append(`
                        <li class="page-item ${currentPage === pageCount ? 'disabled' : ''}">
                            <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    `);
                }
            }

            pagination.off("click").on("click", "a.page-link", function (e) {
                e.preventDefault();
                const targetPage = parseInt($(this).data("page"));
                if (!isNaN(targetPage) && targetPage >= 1 && targetPage <= pageCount) {
                    showPage(targetPage);
                }
            });

            showPage(1);
        }

        searchInput.on("input", renderProductCards);
        categoryFilter.on("change", renderProductCards);
        rowsPerPageSelect.on("change", renderProductCards);

        renderProductCards();
    });
</script>